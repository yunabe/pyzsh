#compdef zfs

_zfs() {
	local context state line expl
	typeset -A opt_args
	local -a subcmds rw_properties rw_propnames ro_properties

	subcmds=(
		"create" "destroy" "clone" "promote" "rename" "snapshot"
		"rollback" "list" "set" "get" "inherit" "mount" "unmount"
		"share" "unshare" "send" "receive" "allow" "unallow"
		"upgrade"
	)

	ro_properties=(
		"name" "type" "creation" "used" "available" "referenced"
		"compressratio" "mounted" "origin"
	)

	# TODO: Be cleverer about what values can be set.  Is there any way to
	# set the sorting for *size properties to false by default?
	rw_properties=(
		"aclinherit:value:(discard noallow secure passthrough)"
		"aclmode:value:(discard groupmask passthrough)"
		"atime:value:(on off)"
		"canmount:value:(on off)"
		"checksum:value:(on off fletcher2 fletcher4 sha256)"
		"compression:value:(on off lzjb gzip gzip-{1..9})"
		"copies:value:(1 2 3)"
		"devices:value:(on off)"
		"exec:value:(on off)"
		"mountpoint:value:{if [[ -prefix /* ]]; then _path_files -/; else _wanted mountpoints expl 'mountpoint (type \"/\" to start completing paths)' compadd legacy none; fi}"
		"quota:number or 'none':{if [[ -prefix [0-9]## ]]; then _message -e 'number'; elif [[ $PREFIX == quota= ]]; then _wanted none expl 'number or none' compadd none; else _wanted none expl 'quota' compadd none; fi}"
		"readonly:value:(on off)"
		"recordsize:value:(512 1K 2K 4K 8K 16K 32K 64K 128K)"
		"reservation:value:" # <size>, "none"
		"setuid:value:(on off)"
		"shareiscsi:value:(on off)" # or "type=<type>"
		"sharenfs:value:(on off)" # or share(1M) options
		"snapdir:value:(hidden visible)"
		"version:value:(1 2 current)"
		"volblocksize:value:(512 1K 2K 4K 8K 16K 32K 64K 128K)"
		"volsize:value:" # <size>
		"xattr:value:(on off)"
		"zoned:value:(on off)"
	)

	rw_propnames=( ${rw_properties%%:*} )

	if [[ $service == "zfs" ]]; then
		_arguments -C -A "-*" \
			'-\?[help]' \
			'*::command:->subcmd' && return 0

		if (( CURRENT == 1 )); then
			_wanted commands expl "zfs subcommand" compadd -a subcmds
			return
		fi
		service="$words[1]"
		curcontext="${curcontext%:*}=$service:"
	fi

	case $service in
	("create")
		_arguments -A "-*" \
			'-p[create parent datasets]' \
			'-o[set initial properties]:property:_values -s , "property" $rw_properties' \
			- set1 \
			':filesystem:' \
			- set2 \
			'-s[create sparse volume]' \
			'-b[set volblocksize]:blocksize:' \
			'-V[set size]:size:' \
			':volume:'
		;;

	("destroy")
		_arguments -A "-*" \
			'-r[recursively destroy all children]' \
			'-R[recursively destroy all dependents]' \
			'-f[force unmounts]' \
			':filesystem/volume/snapshot:_zfs_dataset'
		;;

	("snapshot")
		_arguments -A "-*" \
			'-r[recursively snapshot all descendant datasets]' \
			':filesystem/volume:_zfs_dataset -t fs -t vol -S@'
		;;

	("rollback")
		_arguments -A "-*" \
			'-r[recursively destroy more recent snapshots]' \
			'-R[recursively destroy more recent snapshots and clones]' \
			'-f[force unmounts]' \
			':snapshot:_zfs_dataset -t snap'
		;;

	("clone")
		# XXX needs to bail if there are no snapshots
		_arguments -A "-*" \
			'-p[create parent datasets]' \
			':snapshot:_zfs_dataset -t snap' \
			':filesystem/volume:'
		;;

	("promote")
		# XXX complete only cloned filesystems
		_arguments \
			':filesystem:_zfs_dataset -t fs' \
		;;

	("rename")
		_arguments -A "-*" \
			- set1 \
			'-p[create parent datasets]' \
			':filesystem/volume/snapshot:_zfs_dataset' \
			':filesystem/volume/snapshot:' \
			- set2 \
			'-r[recursively rename snapshots of all descendent datasets]' \
			':snapshot:_zfs_dataset -t snap' \
			':snapshot:'
		;;

	("list")
		_arguments -A "-*" \
			'-r[recursively display children]' \
			'-H[scripting mode]' \
			'-o[properties to list]:property:_values -s , "property" $ro_properties $rw_propnames' \
			'*-s[sort key (ascending)]:property:_values "property" $ro_properties $rw_propnames' \
			'*-S[sort key (descending)]:property:_values "property" $ro_properties $rw_propnames' \
			'-t[dataset types to list]:dataset type:_values -s , "dataset type" filesystem snapshot volume' \
			'*:filesystem/volume/snapshot:_zfs_dataset'
		;;

	("set")
		_arguments \
			':property:_values -s , "property" $rw_properties' \
			'*:filesystem/volume:_zfs_dataset -t fs -t vol'
		;;

	("get")
		_arguments -A "-*" \
			"-r[recursively display children's properties]" \
			'-H[scripting mode]' \
			'-p[display numbers exactly]' \
			'-s[specify sources]:source:_values -s , "source" local default inherited temporary none' \
			'-o[specify fields]:field:_values -s , "field" name property value source' \
			':property:_values -s , "property" $ro_properties $rw_propnames all' \
			'*:filesystem/volume/snapshot:_zfs_dataset'
		;;

	("inherit")
		_arguments -A "-*" \
			'-r[recursively inherit property for all children]' \
			':property:_values -s , "property" $ro_properties $rw_properties' \
			'*:filesystem/volume:_zfs_dataset -t fs -t vol'
		;;

	("mount")
		_arguments -A "-*" \
			'-o[mount options]:mount options:_values -s , "option" {,no}{devices,exec,setuid} ro rw' \
			'-O[overlay mount]' \
			'-v[report mount progress]' \
			- set1 \
			':filesystem:_zfs_dataset -t fs' \
			- set2 \
			'-a[mount all available ZFS filesystems]'
		;;

	("unmount")
		_arguments -A "-*" \
			- set1 \
			'-f[force unmount]' \
			':filesystem:_zfs_dataset -t fs -t mtpt' \
			- set2 \
			'-a[unmount all ZFS filesystems]'
		;;

	("share")
		_arguments -A "-*" \
			- set1 \
			'-a[share all available ZFS filesystems]' \
			- set2 \
			':filesystem:_zfs_dataset -t fs'
		;;

	("unshare")
		_arguments -A "-*" \
			- set1 \
			'-a[unshare all shared ZFS filesystems]' \
			- set2 \
			'-F[force unshare]' \
			':filesystem:_zfs_dataset -t fs -t mtpt'
		;;

	("send")
		_arguments -A "-*" \
			'-i[generate an incremental stream]:snapshot:_zfs_dataset -t snap' \
			':snapshot:_zfs_dataset -t snap'
		;;

	("receive")
		_arguments -A "-*" \
			'-v[verbose]' \
			'-n[do not receive the stream]' \
			'-F[force a rollback if necessary]' \
			- set1 \
			':filesystem/volume/snapshot:_zfs_dataset' \
			- set2 \
			'-d[set path prefix]:filesystem:_zfs_dataset -t fs'
		;;

	("allow"|"unallow")
		_message "unimplemented zfs subcommand: $service"
		;;

	("upgrade")
		_arguments -A "-*" \
			- set1 \
			'-v[verbose]' \
			- set2 \
			'-a[upgrade all filesystems on all pools]' \
			'-r[upgrade descendent filesystems, too]' \
			'-V[upgrade to specified version]:version:(1 2)' \
			- set3 \
			'-r[upgrade descendent filesystems, too]' \
			'-V[upgrade to specified version]:version:(1 2)' \
			':filesystem:_zfs_dataset -t fs' \
		;;

	(*)
		_message "unknown zfs subcommand: $service"
		;;
	esac
}

_zfs "$@"
